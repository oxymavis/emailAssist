import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  Grid,
  Paper,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Switch,
  FormControlLabel,
  Tooltip,
  useTheme,
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  ContentCopy as CopyIcon,
  Preview as PreviewIcon,
  Code as CodeIcon,
  Download as DownloadIcon,
  Upload as UploadIcon,
  ExpandMore as ExpandMoreIcon,
  Description as DescriptionIcon,
  Transform as TransformIcon,
  Api as ApiIcon,
  DataObject as DataIcon,
  Schema as SchemaIcon,
} from '@mui/icons-material';

interface WorkflowTemplate {
  id: string;
  name: string;
  description: string;
  type: 'trello' | 'jira' | 'asana' | 'notion' | 'slack' | 'webhook' | 'database';
  category: 'task_management' | 'communication' | 'data_sync' | 'notification' | 'custom';
  enabled: boolean;
  template: {
    // ËæìÂá∫Ê†ºÂºèÈÖçÁΩÆ
    outputFormat: string;

    // Â≠óÊÆµÊò†Â∞Ñ
    fieldMapping: {
      title: string;
      description: string;
      priority: string;
      assignee?: string;
      labels?: string[];
      dueDate?: string;
      customFields?: Record<string, string>;
    };

    // Êï∞ÊçÆËΩ¨Êç¢ËßÑÂàô
    transformRules: {
      dateFormat?: string;
      priorityMapping?: Record<string, string>;
      categoryMapping?: Record<string, string>;
      textProcessing?: {
        truncateDescription?: number;
        removeHtml?: boolean;
        extractUrls?: boolean;
      };
    };

    // Êù°‰ª∂ÈÄªËæë
    conditionalLogic?: {
      conditions: Array<{
        field: string;
        operator: 'equals' | 'contains' | 'greater' | 'less';
        value: string;
        action: 'include' | 'exclude' | 'transform';
      }>;
    };

    // APIÈÖçÁΩÆÊ®°Êùø
    apiTemplate?: {
      method: string;
      endpoint: string;
      headers: Record<string, string>;
      bodyTemplate: string;
      responseMapping?: Record<string, string>;
    };
  };
  variables: string[];
  usageCount: number;
  isPublic: boolean;
  createdAt: Date;
  updatedAt: Date;
}

const WorkflowTemplateManager: React.FC = () => {
  const { t } = useTranslation();
  const theme = useTheme();

  const [templates, setTemplates] = useState<WorkflowTemplate[]>([
    {
      id: '1',
      name: 'Trello Card Creator',
      description: 'Â∞ÜÈÇÆ‰ª∂ËΩ¨Êç¢‰∏∫TrelloÂç°ÁâáÁöÑÊ†áÂáÜÊ®°Êùø',
      type: 'trello',
      category: 'task_management',
      enabled: true,
      template: {
        outputFormat: 'card',
        fieldMapping: {
          title: '{{subject}}',
          description: 'From: {{sender.name}} ({{sender.email}})\nReceived: {{receivedDateTime}}\nPriority: {{priority}}\n\n{{content}}',
          priority: '{{priority}}',
          labels: ['email', '{{category}}'],
          dueDate: '{{suggestedDueDate}}',
        },
        transformRules: {
          dateFormat: 'YYYY-MM-DD',
          priorityMapping: {
            'low': 'Low',
            'normal': 'Normal',
            'high': 'High',
            'critical': 'Critical'
          },
          textProcessing: {
            truncateDescription: 500,
            removeHtml: true,
            extractUrls: true,
          },
        },
        conditionalLogic: {
          conditions: [
            {
              field: 'priority',
              operator: 'equals',
              value: 'critical',
              action: 'transform'
            }
          ]
        },
        apiTemplate: {
          method: 'POST',
          endpoint: '/1/cards',
          headers: {
            'Content-Type': 'application/json',
          },
          bodyTemplate: JSON.stringify({
            name: '{{title}}',
            desc: '{{description}}',
            idList: '{{listId}}',
            pos: 'top',
            labels: '{{labels}}',
          }, null, 2),
        },
      },
      variables: ['subject', 'sender.name', 'sender.email', 'receivedDateTime', 'priority', 'category', 'content'],
      usageCount: 142,
      isPublic: true,
      createdAt: new Date('2024-01-15'),
      updatedAt: new Date('2024-03-10'),
    },
    {
      id: '2',
      name: 'Jira Issue Template',
      description: 'ÂàõÂª∫JiraÈóÆÈ¢òÂçïÁöÑ‰ºÅ‰∏öÁ∫ßÊ®°Êùø',
      type: 'jira',
      category: 'task_management',
      enabled: true,
      template: {
        outputFormat: 'issue',
        fieldMapping: {
          title: '[EMAIL] {{subject}}',
          description: 'Reporter: {{sender.name}} ({{sender.email}})\nReceived: {{receivedDateTime}}\n\nDescription:\n{{content}}\n\nAI Analysis:\n- Category: {{category}}\n- Priority: {{priority}}\n- Sentiment: {{sentiment}}\n- Action Required: {{actionRequired}}',
          priority: '{{priority}}',
          assignee: '{{defaultAssignee}}',
        },
        transformRules: {
          priorityMapping: {
            'low': 'Low',
            'normal': 'Medium',
            'high': 'High',
            'critical': 'Highest'
          },
          categoryMapping: {
            'support': 'Customer Support',
            'bug': 'Bug Report',
            'feature': 'Feature Request',
          },
          textProcessing: {
            removeHtml: true,
            extractUrls: true,
          },
        },
        apiTemplate: {
          method: 'POST',
          endpoint: '/rest/api/2/issue',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Basic {{authToken}}',
          },
          bodyTemplate: JSON.stringify({
            fields: {
              project: { key: '{{projectKey}}' },
              summary: '{{title}}',
              description: '{{description}}',
              issuetype: { name: 'Task' },
              priority: { name: '{{priority}}' },
              assignee: { name: '{{assignee}}' },
            }
          }, null, 2),
        },
      },
      variables: ['subject', 'sender.name', 'sender.email', 'receivedDateTime', 'category', 'priority', 'sentiment', 'content', 'actionRequired'],
      usageCount: 89,
      isPublic: true,
      createdAt: new Date('2024-02-01'),
      updatedAt: new Date('2024-03-12'),
    },
    {
      id: '3',
      name: 'Slack Alert Message',
      description: 'SlackÈ¢ëÈÅìË≠¶Êä•Ê∂àÊÅØÊ®°Êùø',
      type: 'slack',
      category: 'notification',
      enabled: true,
      template: {
        outputFormat: 'message',
        fieldMapping: {
          title: 'üö® {{priority}} Priority Email',
          description: '*From:* {{sender.name}} <{{sender.email}}>\n*Subject:* {{subject}}\n*Received:* {{receivedDateTime}}\n*Priority:* {{priority}}\n*Sentiment:* {{sentiment}}\n\n{{truncatedContent}}',
        },
        transformRules: {
          textProcessing: {
            truncateDescription: 200,
            removeHtml: true,
          },
        },
        apiTemplate: {
          method: 'POST',
          endpoint: '{{webhookUrl}}',
          headers: {
            'Content-Type': 'application/json',
          },
          bodyTemplate: JSON.stringify({
            channel: '{{channel}}',
            username: 'Email Assistant',
            icon_emoji: ':email:',
            text: '{{title}}',
            attachments: [
              {
                color: '{{priorityColor}}',
                fields: [
                  {
                    title: 'Email Details',
                    value: '{{description}}',
                    short: false
                  }
                ]
              }
            ]
          }, null, 2),
        },
      },
      variables: ['priority', 'sender.name', 'sender.email', 'subject', 'receivedDateTime', 'sentiment', 'content'],
      usageCount: 56,
      isPublic: true,
      createdAt: new Date('2024-02-15'),
      updatedAt: new Date('2024-03-08'),
    },
  ]);

  const [selectedTemplate, setSelectedTemplate] = useState<WorkflowTemplate | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [previewDialogOpen, setPreviewDialogOpen] = useState(false);
  const [editMode, setEditMode] = useState(false);

  // Ê®°ÊùøÂàÜÁ±ª
  const templateCategories = [
    { key: 'task_management', label: t('workflows.categories.taskManagement'), icon: <DescriptionIcon /> },
    { key: 'communication', label: t('workflows.categories.communication'), icon: <ApiIcon /> },
    { key: 'data_sync', label: t('workflows.categories.dataSync'), icon: <TransformIcon /> },
    { key: 'notification', label: t('workflows.categories.notification'), icon: <DataIcon /> },
    { key: 'custom', label: t('workflows.categories.custom'), icon: <SchemaIcon /> },
  ];

  // ÈõÜÊàêÁ±ªÂûã
  const integrationTypes = [
    { key: 'trello', label: 'Trello', icon: 'üìã' },
    { key: 'jira', label: 'Jira', icon: 'üéØ' },
    { key: 'asana', label: 'Asana', icon: 'üìå' },
    { key: 'notion', label: 'Notion', icon: 'üìù' },
    { key: 'slack', label: 'Slack', icon: 'üí¨' },
    { key: 'webhook', label: 'Webhook', icon: 'üîó' },
    { key: 'database', label: 'Database', icon: 'üóÑÔ∏è' },
  ];

  // Â§ÑÁêÜÊ®°ÊùøÂêØÁî®/Á¶ÅÁî®
  const handleTemplateToggle = (templateId: string) => {
    setTemplates(prev => prev.map(template =>
      template.id === templateId
        ? { ...template, enabled: !template.enabled }
        : template
    ));
  };

  // Â§ÑÁêÜÊ®°ÊùøÂà†Èô§
  const handleDeleteTemplate = (templateId: string) => {
    setTemplates(prev => prev.filter(template => template.id !== templateId));
  };

  // Â§ÑÁêÜÊ®°ÊùøÂ§çÂà∂
  const handleCopyTemplate = (template: WorkflowTemplate) => {
    const newTemplate: WorkflowTemplate = {
      ...template,
      id: Date.now().toString(),
      name: `${template.name} (Copy)`,
      usageCount: 0,
      createdAt: new Date(),
      updatedAt: new Date(),
    };
    setTemplates(prev => [...prev, newTemplate]);
  };

  // Ê∏≤ÊüìÊ®°ÊùøÈ¢ÑËßàÂØπËØùÊ°Ü
  const renderPreviewDialog = () => (
    <Dialog
      open={previewDialogOpen}
      onClose={() => setPreviewDialogOpen(false)}
      maxWidth="md"
      fullWidth
    >
      <DialogTitle>
        {t('workflows.templatePreview')}: {selectedTemplate?.name}
      </DialogTitle>
      <DialogContent>
        {selectedTemplate && (
          <Box>
            {/* Â≠óÊÆµÊò†Â∞ÑÈ¢ÑËßà */}
            <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
              {t('workflows.fieldMapping')}
            </Typography>
            <Paper sx={{ p: 2, bgcolor: 'grey.50', mb: 2 }}>
              <pre style={{ fontFamily: 'monospace', fontSize: '0.875rem', margin: 0, whiteSpace: 'pre-wrap' }}>
                {JSON.stringify(selectedTemplate.template.fieldMapping, null, 2)}
              </pre>
            </Paper>

            {/* APIÊ®°ÊùøÈ¢ÑËßà */}
            {selectedTemplate.template.apiTemplate && (
              <>
                <Typography variant="h6" gutterBottom>
                  {t('workflows.apiTemplate')}
                </Typography>
                <Paper sx={{ p: 2, bgcolor: 'grey.50', mb: 2 }}>
                  <Typography variant="subtitle2" gutterBottom>
                    {selectedTemplate.template.apiTemplate.method} {selectedTemplate.template.apiTemplate.endpoint}
                  </Typography>
                  <pre style={{ fontFamily: 'monospace', fontSize: '0.875rem', margin: 0, whiteSpace: 'pre-wrap' }}>
                    {selectedTemplate.template.apiTemplate.bodyTemplate}
                  </pre>
                </Paper>
              </>
            )}

            {/* ÂèòÈáèÂàóË°® */}
            <Typography variant="h6" gutterBottom>
              {t('workflows.availableVariables')}
            </Typography>
            <Box display="flex" flexWrap="wrap" gap={1}>
              {selectedTemplate.variables.map((variable) => (
                <Chip
                  key={variable}
                  label={`{{${variable}}}`}
                  size="small"
                  icon={<CodeIcon />}
                  variant="outlined"
                />
              ))}
            </Box>
          </Box>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={() => setPreviewDialogOpen(false)}>
          {t('common.close')}
        </Button>
        <Button
          variant="contained"
          startIcon={<EditIcon />}
          onClick={() => {
            setPreviewDialogOpen(false);
            setEditMode(true);
            setDialogOpen(true);
          }}
        >
          {t('common.edit')}
        </Button>
      </DialogActions>
    </Dialog>
  );

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ mb: 3 }}>
        <Typography variant="h6">
          {t('workflows.templateManager')}
        </Typography>
        <Box display="flex" gap={1}>
          <Button
            startIcon={<UploadIcon />}
            variant="outlined"
            size="small"
          >
            {t('workflows.importTemplate')}
          </Button>
          <Button
            startIcon={<AddIcon />}
            variant="contained"
            onClick={() => {
              setSelectedTemplate(null);
              setEditMode(false);
              setDialogOpen(true);
            }}
          >
            {t('workflows.createTemplate')}
          </Button>
        </Box>
      </Box>

      {/* ÊåâÂàÜÁ±ªÂàÜÁªÑÊòæÁ§∫Ê®°Êùø */}
      {templateCategories.map((category) => {
        const categoryTemplates = templates.filter(t => t.category === category.key);
        if (categoryTemplates.length === 0) return null;

        return (
          <Accordion key={category.key} defaultExpanded>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Box display="flex" alignItems="center" gap={1}>
                {category.icon}
                <Typography variant="h6">
                  {category.label} ({categoryTemplates.length})
                </Typography>
              </Box>
            </AccordionSummary>
            <AccordionDetails>
              <Grid container spacing={2}>
                {categoryTemplates.map((template) => {
                  const integrationType = integrationTypes.find(t => t.key === template.type);
                  return (
                    <Grid item xs={12} md={6} lg={4} key={template.id}>
                      <Card variant="outlined">
                        <CardContent>
                          <Box display="flex" justifyContent="space-between" alignItems="flex-start" sx={{ mb: 2 }}>
                            <Box display="flex" alignItems="center" gap={1}>
                              <Typography variant="h6" fontSize="1.2rem">
                                {integrationType?.icon}
                              </Typography>
                              <Box>
                                <Typography variant="subtitle1" fontWeight="bold">
                                  {template.name}
                                </Typography>
                                <Typography variant="caption" color="text.secondary">
                                  {integrationType?.label}
                                </Typography>
                              </Box>
                            </Box>
                            <Switch
                              checked={template.enabled}
                              onChange={() => handleTemplateToggle(template.id)}
                              size="small"
                            />
                          </Box>

                          <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                            {template.description}
                          </Typography>

                          {/* ÂèòÈáèÁªüËÆ° */}
                          <Box display="flex" alignItems="center" gap={1} sx={{ mb: 2 }}>
                            <Chip
                              label={`${template.variables.length} ${t('workflows.variables')}`}
                              size="small"
                              variant="outlined"
                            />
                            <Chip
                              label={`${t('workflows.used')} ${template.usageCount}`}
                              size="small"
                              color="primary"
                              variant="outlined"
                            />
                            {template.isPublic && (
                              <Chip
                                label={t('workflows.public')}
                                size="small"
                                color="success"
                                variant="outlined"
                              />
                            )}
                          </Box>

                          {/* Êìç‰ΩúÊåâÈíÆ */}
                          <Box display="flex" gap={0.5}>
                            <Tooltip title={t('workflows.preview')}>
                              <IconButton
                                size="small"
                                onClick={() => {
                                  setSelectedTemplate(template);
                                  setPreviewDialogOpen(true);
                                }}
                              >
                                <PreviewIcon />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title={t('common.copy')}>
                              <IconButton
                                size="small"
                                onClick={() => handleCopyTemplate(template)}
                              >
                                <CopyIcon />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title={t('workflows.export')}>
                              <IconButton size="small">
                                <DownloadIcon />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title={t('common.edit')}>
                              <IconButton
                                size="small"
                                onClick={() => {
                                  setSelectedTemplate(template);
                                  setEditMode(true);
                                  setDialogOpen(true);
                                }}
                              >
                                <EditIcon />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title={t('common.delete')}>
                              <IconButton
                                size="small"
                                onClick={() => handleDeleteTemplate(template.id)}
                              >
                                <DeleteIcon />
                              </IconButton>
                            </Tooltip>
                          </Box>
                        </CardContent>
                      </Card>
                    </Grid>
                  );
                })}
              </Grid>
            </AccordionDetails>
          </Accordion>
        );
      })}

      {renderPreviewDialog()}
    </Box>
  );
};

export default WorkflowTemplateManager;