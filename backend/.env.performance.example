# Email Assist Performance Optimization Configuration
# 复制此文件为 .env.performance 并根据你的环境调整配置

# ========================================
# 数据库连接池优化配置
# ========================================

# 数据库连接池最大连接数 (默认: 30)
DB_POOL_MAX=30

# 数据库连接池最小连接数 (默认: 5)
DB_POOL_MIN=5

# 数据库连接超时时间 (毫秒, 默认: 5000)
DB_CONNECT_TIMEOUT=5000

# 数据库空闲连接超时时间 (毫秒, 默认: 60000)
DB_IDLE_TIMEOUT=60000

# 数据库查询超时时间 (毫秒, 默认: 30000)
DB_QUERY_TIMEOUT=30000

# 数据库语句超时时间 (毫秒, 默认: 60000)
DB_STATEMENT_TIMEOUT=60000

# ========================================
# Redis 缓存优化配置
# ========================================

# Redis 连接URL (如果未设置，将使用下面的分别配置)
# REDIS_URL=redis://localhost:6379

# Redis 主机地址 (默认: localhost)
REDIS_HOST=localhost

# Redis 端口 (默认: 6379)
REDIS_PORT=6379

# Redis 密码 (如果需要)
# REDIS_PASSWORD=your_redis_password

# Redis 数据库索引 (默认: 0)
REDIS_DB=0

# ========================================
# 性能监控配置
# ========================================

# 性能监控收集间隔 (毫秒, 默认: 30000)
PERFORMANCE_MONITOR_INTERVAL=30000

# 慢查询阈值 (毫秒, 默认: 1000)
SLOW_QUERY_THRESHOLD=1000

# 连接池高利用率警告阈值 (百分比, 默认: 80)
POOL_WARNING_THRESHOLD=80

# 连接池严重利用率告警阈值 (百分比, 默认: 90)
POOL_CRITICAL_THRESHOLD=90

# 缓存命中率警告阈值 (百分比, 默认: 80)
CACHE_HIT_WARNING_THRESHOLD=80

# 缓存命中率严重告警阈值 (百分比, 默认: 60)
CACHE_HIT_CRITICAL_THRESHOLD=60

# ========================================
# 缓存配置
# ========================================

# 默认缓存TTL (秒, 默认: 300)
DEFAULT_CACHE_TTL=300

# 统计信息缓存TTL (秒, 默认: 1800)
STATS_CACHE_TTL=1800

# 启用缓存压缩 (默认: true)
ENABLE_CACHE_COMPRESSION=true

# 启用缓存预刷新 (默认: true)
ENABLE_CACHE_REFRESH_AHEAD=true

# 缓存预刷新阈值 (百分比, 默认: 20)
CACHE_REFRESH_THRESHOLD=20

# ========================================
# 批量操作配置
# ========================================

# 默认批量操作大小 (默认: 1000)
DEFAULT_BATCH_SIZE=1000

# 最大批量操作大小 (默认: 5000)
MAX_BATCH_SIZE=5000

# 批量操作重试次数 (默认: 3)
BATCH_RETRY_ATTEMPTS=3

# 批量操作重试延迟 (毫秒, 默认: 1000)
BATCH_RETRY_DELAY=1000

# ========================================
# 应用配置
# ========================================

# 应用名称 (用于数据库连接标识)
APP_NAME=email-assist

# 启用性能监控 (默认: true)
ENABLE_PERFORMANCE_MONITORING=true

# 启用查询分析 (默认: true)
ENABLE_QUERY_ANALYSIS=true

# 启用缓存 (默认: true)
ENABLE_CACHING=true

# API版本
API_VERSION=v1

# ========================================
# 日志配置
# ========================================

# 日志级别 (默认: info)
LOG_LEVEL=info

# 启用数据库操作日志 (默认: true)
ENABLE_DB_OPERATION_LOGS=true

# 启用性能日志 (默认: true)
ENABLE_PERFORMANCE_LOGS=true

# 启用缓存日志 (默认: false)
ENABLE_CACHE_LOGS=false

# ========================================
# 生产环境优化配置
# ========================================

# Node.js环境
NODE_ENV=production

# 启用集群模式 (如果使用PM2)
CLUSTER_MODE=true

# 最大内存限制 (MB)
MAX_MEMORY_MB=1024

# 启用 gzip 压缩
ENABLE_GZIP=true

# 启用请求限流
ENABLE_RATE_LIMITING=true

# 请求限流窗口时间 (毫秒, 默认: 900000 = 15分钟)
RATE_LIMIT_WINDOW=900000

# 请求限流最大请求数 (默认: 100)
RATE_LIMIT_MAX_REQUESTS=100

# ========================================
# 安全配置
# ========================================

# JWT密钥 (生产环境请使用强随机密钥)
# JWT_SECRET=your_super_secure_jwt_secret_key_here

# CORS 允许的源
# CORS_ORIGIN=https://yourdomain.com

# 启用 Helmet 安全中间件 (默认: true)
ENABLE_HELMET=true

# ========================================
# 监控和告警配置
# ========================================

# 启用 Webhook 告警通知
# ENABLE_WEBHOOK_ALERTS=false

# Webhook URL (用于发送告警通知)
# WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# 启用邮件告警通知
# ENABLE_EMAIL_ALERTS=false

# 告警邮件收件人
# ALERT_EMAIL_RECIPIENTS=admin@yourdomain.com,ops@yourdomain.com

# SMTP 配置 (用于邮件告警)
# SMTP_HOST=smtp.yourdomain.com
# SMTP_PORT=587
# SMTP_USER=alerts@yourdomain.com
# SMTP_PASSWORD=your_smtp_password

# ========================================
# 使用说明
# ========================================

# 1. 复制此文件为 .env.performance
# 2. 根据你的环境调整配置值
# 3. 确保所有必需的服务 (PostgreSQL, Redis) 正在运行
# 4. 运行性能优化初始化脚本：
#    npm run performance:init
# 5. 启动应用程序：
#    npm run dev (开发环境)
#    npm start (生产环境)

# ========================================
# 性能优化建议
# ========================================

# 1. 数据库优化：
#    - 根据负载调整连接池大小
#    - 定期分析慢查询并优化
#    - 使用适当的索引策略
#    - 定期刷新物化视图

# 2. 缓存优化：
#    - 设置合适的TTL值
#    - 监控缓存命中率
#    - 定期清理过期缓存
#    - 使用缓存预热策略

# 3. 监控优化：
#    - 定期查看性能报告
#    - 设置合适的告警阈值
#    - 监控系统资源使用情况
#    - 分析性能趋势

# 4. 应用优化：
#    - 使用批量操作处理大量数据
#    - 优化API响应时间
#    - 实现适当的错误处理
#    - 使用连接池管理数据库连接