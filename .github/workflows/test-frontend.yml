name: Frontend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/unit/frontend/**'
      - 'tests/e2e/**'
      - 'package*.json'
      - 'test-config/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/unit/frontend/**'
      - 'tests/e2e/**'
      - 'package*.json'
      - 'test-config/**'

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  lint-and-typecheck:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type checking
        run: npm run type-check

  unit-tests:
    name: 前端单元测试
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:unit -- --coverage --watchAll=false --maxWorkers=2
        env:
          CI: true
        
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./test-reports/coverage/lcov.info
          flags: frontend-unit
          name: frontend-unit-coverage
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-unit-test-results
          path: test-reports/junit/frontend-unit-tests.xml

  component-tests:
    name: 组件测试
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run component tests
        run: npm run test:components
        env:
          CI: true

  e2e-tests:
    name: E2E测试
    runs-on: ubuntu-latest
    needs: [unit-tests, component-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: email_assist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Setup backend dependencies
        run: |
          cd backend
          npm install
          
      - name: Build backend
        run: |
          cd backend
          npm run build
          
      - name: Start backend server
        run: |
          cd backend
          npm start &
        env:
          DATABASE_URL: postgresql://test:testpassword@localhost:5433/email_assist_test
          REDIS_URL: redis://localhost:6380
          NODE_ENV: test
          
      - name: Build frontend
        run: npm run build
        
      - name: Start frontend server
        run: npm run preview &
        
      - name: Wait for servers to be ready
        run: |
          npx wait-on http://localhost:3000 --timeout 60000
          npx wait-on http://localhost:3001/api/health --timeout 60000
          
      - name: Run E2E tests
        run: npx playwright test --config=test-config/playwright.config.ts
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:3001
          
      - name: Upload E2E test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: test-reports/playwright-report/
          
      - name: Upload E2E test screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-screenshots
          path: test-reports/playwright-results/

  accessibility-tests:
    name: 可访问性测试
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start preview server
        run: npm run preview &
        
      - name: Wait for server
        run: npx wait-on http://localhost:3000
        
      - name: Run accessibility tests
        run: npm run test:a11y
        
      - name: Upload accessibility report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-report
          path: test-reports/accessibility/

  visual-regression:
    name: 视觉回归测试
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build application
        run: npm run build
        
      - name: Start preview server
        run: npm run preview &
        
      - name: Wait for server
        run: npx wait-on http://localhost:3000
        
      - name: Run visual regression tests
        run: npm run test:visual
        
      - name: Upload visual test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: visual-regression-report
          path: test-reports/visual/

  performance-tests:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start preview server
        run: npm run preview &
        
      - name: Wait for server
        run: npx wait-on http://localhost:3000
        
      - name: Run Lighthouse performance tests
        run: npm run test:performance
        
      - name: Upload performance report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: test-reports/lighthouse/

  test-summary:
    name: 测试结果汇总
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, accessibility-tests, visual-regression, performance-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate test summary
        run: |
          echo "## 🧪 Frontend 测试结果汇总" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ 单元测试: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 单元测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ E2E测试: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.accessibility-tests.result }}" == "success" ]; then
            echo "✅ 可访问性测试: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 可访问性测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.visual-regression.result }}" == "success" ]; then
            echo "✅ 视觉回归测试: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 视觉回归测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance-tests.result }}" == "success" ]; then
            echo "✅ 性能测试: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 性能测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi