name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'tests/unit/backend/**'
      - 'tests/integration/**'
      - 'test-config/pytest.ini'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'tests/unit/backend/**'
      - 'tests/integration/**'
      - 'test-config/pytest.ini'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint-and-format:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: Run Black formatter check
        run: |
          cd backend
          black --check --diff src/ tests/
          
      - name: Run isort import sorting check
        run: |
          cd backend
          isort --check-only --diff src/ tests/
          
      - name: Run flake8 linting
        run: |
          cd backend
          flake8 src/ tests/
          
      - name: Run mypy type checking
        run: |
          cd backend
          mypy src/

  unit-tests:
    name: 后端单元测试
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: email_assist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run unit tests
        run: |
          cd backend
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --junitxml=../test-reports/junit/backend-unit-tests.xml
        env:
          TEST_DATABASE_URL: postgresql://test:testpassword@localhost:5433/email_assist_test
          TEST_REDIS_URL: redis://localhost:6380/1
          PYTHONPATH: src
          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend-unit
          name: backend-unit-coverage
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-unit-test-results
          path: test-reports/junit/backend-unit-tests.xml

  integration-tests:
    name: 后端集成测试
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: email_assist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run database migrations
        run: |
          cd backend
          python -m alembic upgrade head
        env:
          DATABASE_URL: postgresql://test:testpassword@localhost:5433/email_assist_test
          
      - name: Run integration tests
        run: |
          cd backend
          pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=html --junitxml=../test-reports/junit/backend-integration-tests.xml
        env:
          TEST_DATABASE_URL: postgresql://test:testpassword@localhost:5433/email_assist_test
          TEST_REDIS_URL: redis://localhost:6380/1
          PYTHONPATH: src
          OPENAI_API_KEY: test-key
          
      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend-integration
          name: backend-integration-coverage
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-integration-test-results
          path: test-reports/junit/backend-integration-tests.xml

  api-tests:
    name: API测试
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: email_assist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Start backend server
        run: |
          cd backend
          python src/server.py &
        env:
          DATABASE_URL: postgresql://test:testpassword@localhost:5433/email_assist_test
          REDIS_URL: redis://localhost:6380/1
          OPENAI_API_KEY: test-key
          
      - name: Wait for server to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'
          
      - name: Run API tests with Newman
        run: |
          npm install -g newman
          newman run tests/api/email-assist.postman_collection.json \
            --environment tests/api/test.postman_environment.json \
            --reporters cli,junit \
            --reporter-junit-export test-reports/junit/api-tests.xml
            
      - name: Upload API test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-results
          path: test-reports/junit/api-tests.xml

  security-tests:
    name: 安全测试
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety
          
      - name: Run Bandit security scan
        run: |
          cd backend
          bandit -r src/ -f json -o ../test-reports/security/bandit-report.json || true
          bandit -r src/ -f txt
          
      - name: Run Safety vulnerability scan
        run: |
          cd backend
          safety check --json --output ../test-reports/security/safety-report.json || true
          safety check
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: test-reports/security/

  performance-tests:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: api-tests
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: email_assist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Setup Node.js for Artillery
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm install -g artillery
          
      - name: Start backend server
        run: |
          cd backend
          python src/server.py &
        env:
          DATABASE_URL: postgresql://test:testpassword@localhost:5433/email_assist_test
          REDIS_URL: redis://localhost:6380/1
          
      - name: Wait for server
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'
          
      - name: Run performance tests
        run: |
          artillery run tests/performance/load-test.yml \
            --output test-reports/performance/artillery-report.json
          artillery report test-reports/performance/artillery-report.json \
            --output test-reports/performance/artillery-report.html
            
      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: test-reports/performance/

  test-summary:
    name: 测试结果汇总
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, security-tests, performance-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate test summary
        run: |
          echo "## 🔧 Backend 测试结果汇总" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ 单元测试: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 单元测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ 集成测试: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 集成测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.api-tests.result }}" == "success" ]; then
            echo "✅ API测试: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ API测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-tests.result }}" == "success" ]; then
            echo "✅ 安全测试: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 安全测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance-tests.result }}" == "success" ]; then
            echo "✅ 性能测试: 通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 性能测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi