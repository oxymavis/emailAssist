name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # ÊØèÂ§©ÂáåÊô®2ÁÇπËøêË°åÂÆåÊï¥ÁöÑE2EÊµãËØï
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      browser:
        description: 'ÈÄâÊã©ÊµèËßàÂô®'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all
      test_type:
        description: 'ÊµãËØïÁ±ªÂûã'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - regression
          - full

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  prepare:
    name: ÂáÜÂ§áÊµãËØïÁéØÂ¢É
    runs-on: ubuntu-latest
    outputs:
      browser-matrix: ${{ steps.setup.outputs.browser-matrix }}
      test-pattern: ${{ steps.setup.outputs.test-pattern }}
    steps:
      - name: Setup test configuration
        id: setup
        run: |
          # ËÆæÁΩÆÊµèËßàÂô®Áü©Èòµ
          if [ "${{ github.event.inputs.browser }}" == "all" ] || [ "${{ github.event_name }}" == "schedule" ]; then
            echo 'browser-matrix=["chromium", "firefox", "webkit"]' >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.browser }}" != "" ]; then
            echo 'browser-matrix=["${{ github.event.inputs.browser }}"]' >> $GITHUB_OUTPUT
          else
            echo 'browser-matrix=["chromium"]' >> $GITHUB_OUTPUT
          fi
          
          # ËÆæÁΩÆÊµãËØïÊ®°Âºè
          if [ "${{ github.event.inputs.test_type }}" == "smoke" ] || [ "${{ github.event_name }}" == "pull_request" ]; then
            echo 'test-pattern=tests/e2e/specs/**/smoke.*.e2e.ts' >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.test_type }}" == "regression" ]; then
            echo 'test-pattern=tests/e2e/specs/**/regression.*.e2e.ts' >> $GITHUB_OUTPUT
          else
            echo 'test-pattern=tests/e2e/specs/**/*.e2e.ts' >> $GITHUB_OUTPUT
          fi

  e2e-tests:
    name: E2EÊµãËØï (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ fromJson(needs.prepare.outputs.browser-matrix) }}
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: email_assist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Setup test database
        run: |
          cd backend
          python -m alembic upgrade head
        env:
          DATABASE_URL: postgresql://test:testpassword@localhost:5433/email_assist_test
          
      - name: Seed test data
        run: |
          cd backend
          python scripts/seed_test_data.py
        env:
          DATABASE_URL: postgresql://test:testpassword@localhost:5433/email_assist_test
          
      - name: Build frontend
        run: npm run build
        
      - name: Build backend
        run: |
          cd backend
          npm run build
          
      - name: Start backend server
        run: |
          cd backend
          npm start &
        env:
          DATABASE_URL: postgresql://test:testpassword@localhost:5433/email_assist_test
          REDIS_URL: redis://localhost:6380
          NODE_ENV: test
          
      - name: Start frontend server
        run: npm run preview &
        
      - name: Wait for services
        run: |
          npx wait-on http://localhost:3000 --timeout 120000
          npx wait-on http://localhost:3001/api/health --timeout 120000
          
      - name: Run E2E tests
        run: |
          npx playwright test \
            --config=test-config/playwright.config.ts \
            --project=${{ matrix.browser }} \
            ${{ needs.prepare.outputs.test-pattern }}
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:3001
          CI: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-reports/playwright-report/
            test-reports/playwright-results/
          retention-days: 7
          
      - name: Upload trace files
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-traces-${{ matrix.browser }}
          path: test-reports/playwright-results/
          retention-days: 3

  mobile-tests:
    name: ÁßªÂä®Á´ØE2EÊµãËØï
    runs-on: ubuntu-latest
    needs: prepare
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'full'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: email_assist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    strategy:
      matrix:
        device: ["Mobile Chrome", "Mobile Safari", "tablet"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          npm ci
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build and start services
        run: |
          npm run build
          npm run preview &
          cd backend
          npm run build
          npm start &
        env:
          DATABASE_URL: postgresql://test:testpassword@localhost:5433/email_assist_test
          REDIS_URL: redis://localhost:6380
          NODE_ENV: test
          
      - name: Wait for services
        run: |
          npx wait-on http://localhost:3000 --timeout 120000
          npx wait-on http://localhost:3001/api/health --timeout 120000
          
      - name: Run mobile E2E tests
        run: |
          npx playwright test \
            --config=test-config/playwright.config.ts \
            --project="${{ matrix.device }}" \
            tests/e2e/specs/mobile/
        env:
          BASE_URL: http://localhost:3000
          
      - name: Upload mobile test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: mobile-e2e-results-${{ matrix.device }}
          path: test-reports/playwright-report/

  accessibility-e2e:
    name: E2EÂèØËÆøÈóÆÊÄßÊµãËØï
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'full'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright and axe
        run: |
          npx playwright install --with-deps chromium
          npm install @axe-core/playwright
          
      - name: Build application
        run: npm run build
        
      - name: Start preview server
        run: npm run preview &
        
      - name: Wait for server
        run: npx wait-on http://localhost:3000
        
      - name: Run accessibility E2E tests
        run: npx playwright test tests/accessibility/
        
      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-e2e-results
          path: test-reports/accessibility/

  test-summary:
    name: E2EÊµãËØïÁªìÊûúÊ±áÊÄª
    runs-on: ubuntu-latest
    needs: [e2e-tests, mobile-tests, accessibility-e2e]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate comprehensive test summary
        run: |
          echo "## üé≠ E2EÊµãËØïÁªìÊûúÊ±áÊÄª" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ÊµãËØïÊâßË°åÊó∂Èó¥:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Ëß¶Âèë‰∫ã‰ª∂:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Ê°åÈù¢ÊµèËßàÂô®ÊµãËØïÁªìÊûú
          echo "### üñ•Ô∏è Ê°åÈù¢ÊµèËßàÂô®ÊµãËØï" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "‚úÖ Ê°åÈù¢E2EÊµãËØï: ÂÖ®ÈÉ®ÈÄöËøá" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Ê°åÈù¢E2EÊµãËØï: Â≠òÂú®Â§±Ë¥•" >> $GITHUB_STEP_SUMMARY
          fi
          
          # ÁßªÂä®Á´ØÊµãËØïÁªìÊûú
          if [ "${{ needs.mobile-tests.result }}" != "skipped" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üì± ÁßªÂä®Á´ØÊµãËØï" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.mobile-tests.result }}" == "success" ]; then
              echo "‚úÖ ÁßªÂä®Á´ØE2EÊµãËØï: ÂÖ®ÈÉ®ÈÄöËøá" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå ÁßªÂä®Á´ØE2EÊµãËØï: Â≠òÂú®Â§±Ë¥•" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # ÂèØËÆøÈóÆÊÄßÊµãËØïÁªìÊûú
          if [ "${{ needs.accessibility-e2e.result }}" != "skipped" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ôø ÂèØËÆøÈóÆÊÄßÊµãËØï" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.accessibility-e2e.result }}" == "success" ]; then
              echo "‚úÖ ÂèØËÆøÈóÆÊÄßE2EÊµãËØï: ÂÖ®ÈÉ®ÈÄöËøá" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå ÂèØËÆøÈóÆÊÄßE2EÊµãËØï: Â≠òÂú®Â§±Ë¥•" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # ÊµãËØïÊä•ÂëäÈìæÊé•
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä ÊµãËØïÊä•Âëä" >> $GITHUB_STEP_SUMMARY
          echo "ÊµãËØïÁªìÊûúËØ¶ÊÉÖËØ∑Êü•Áúã‰∏ä‰º†ÁöÑartifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- ÊµãËØïÊà™ÂõæÂíåËßÜÈ¢ë" >> $GITHUB_STEP_SUMMARY
          echo "- TraceÊñá‰ª∂ÔºàÂ§±Ë¥•Êó∂Ôºâ" >> $GITHUB_STEP_SUMMARY
          echo "- ÊµãËØïÊâßË°åÊä•Âëä" >> $GITHUB_STEP_SUMMARY
          
      - name: Create issue on E2E failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `E2E Tests Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `## E2EÊµãËØïÂ§±Ë¥•Êä•Âëä\n\n**Êó∂Èó¥:** ${new Date().toISOString()}\n**Â∑•‰ΩúÊµÅ:** ${context.workflow}\n**ËøêË°åID:** ${context.runId}\n\nËØ∑Ê£ÄÊü•ÊµãËØïÂ§±Ë¥•ÂéüÂõ†Âπ∂ÂèäÊó∂‰øÆÂ§ç„ÄÇ`,
              labels: ['bug', 'e2e-failure', 'urgent']
            })

  lighthouse-tests:
    name: LighthouseÊÄßËÉΩÊµãËØï
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'full'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start preview server
        run: npm run preview &
        
      - name: Wait for server
        run: npx wait-on http://localhost:3000
        
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/