# Email Assist - Development Docker Compose Configuration
version: '3.8'

networks:
  email-assist-dev:
    driver: bridge

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

services:
  # Development Database
  postgres-dev:
    image: postgres:15-alpine
    container_name: email-assist-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: email_assist_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/init-dev.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    networks:
      - email-assist-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d email_assist_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Development Cache
  redis-dev:
    image: redis:7-alpine
    container_name: email-assist-redis-dev
    restart: unless-stopped
    command: redis-server --requirepass dev_password
    volumes:
      - redis_dev_data:/data
    ports:
      - "6380:6379"
    networks:
      - email-assist-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Development Backend (with hot reload)
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: build-stage
    container_name: email-assist-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:dev_password@postgres-dev:5432/email_assist_dev
      REDIS_URL: redis://:dev_password@redis-dev:6379
      JWT_SECRET: dev_jwt_secret_key_for_development
      DEBUG: "app:*"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
    ports:
      - "3001:3001"
      - "9229:9229" # Node.js debug port
    networks:
      - email-assist-dev
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    command: npm run dev
    stdin_open: true
    tty: true

  # Development Frontend (served by Vite dev server)
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: build-stage
    container_name: email-assist-frontend-dev
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: http://localhost:3001/api
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "5173:5173" # Vite dev server port
    networks:
      - email-assist-dev
    depends_on:
      - backend-dev
    command: npm run dev -- --host 0.0.0.0
    stdin_open: true
    tty: true

  # Development Nginx (optional, for testing production-like setup)
  nginx-dev:
    image: nginx:alpine
    container_name: email-assist-nginx-dev
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - email-assist-dev
    depends_on:
      - frontend-dev
      - backend-dev

  # Development Tools - MailHog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: email-assist-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI port
    networks:
      - email-assist-dev

  # Development Tools - Adminer (Database management)
  adminer:
    image: adminer:latest
    container_name: email-assist-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    networks:
      - email-assist-dev
    depends_on:
      - postgres-dev

  # Development Tools - Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: email-assist-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis-dev:6379:0:dev_password
    ports:
      - "8082:8081"
    networks:
      - email-assist-dev
    depends_on:
      - redis-dev